<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[redux中间件]]></title>
      <url>/2017/06/10/redux%E4%B8%AD%E9%97%B4%E4%BB%B6/</url>
      <content type="html"><![CDATA[<p>不太理解redux中间件，就翻看了一下中间接相关的简单的源码。看了一下，又简单又精彩，可是我的语言表达能力有限。</p>
<h2 id="源码赏析"><a href="#源码赏析" class="headerlink" title="源码赏析"></a>源码赏析</h2><p>先看看下面几个函数。</p>
<h3 id="compose"><a href="#compose" class="headerlink" title="compose"></a>compose</h3><p>compose要做的事，就是把输入的函数参数，构建成一个复合函数。<br>举例而言：compose(f, g, h)可以等价为(…args) =&gt; f(g(h(…args)))</p>
<pre class=" language-js"><code class="language-js"><span class="token comment" spellcheck="true">/**
 * @param {...Function}
 * @returns {Function} 
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token operator">...</span>funcs<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>funcs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> arg <span class="token operator">=</span><span class="token operator">></span> arg
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>funcs<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> funcs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> funcs<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>reduce() 方法对累加器和数组中的每个元素(从左到右)应用一个函数，将其减少为单个值。如上,若funcs=[f,g,h],则reduce中回调函数第一次收到的参数为f和g,第二次为(…args) =&gt; f(g(…args))和h。由此可知返回结果为(…args) =&gt; f(g(h(…args)))。</p>
<h3 id="applyMiddleware"><a href="#applyMiddleware" class="headerlink" title="applyMiddleware"></a>applyMiddleware</h3><p>源码如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> compose <span class="token keyword">from</span> <span class="token string">'./compose'</span>
<span class="token comment" spellcheck="true">/**
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */</span>
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">applyMiddleware</span><span class="token punctuation">(</span><span class="token operator">...</span>middlewares<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span>createStore<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> preloadedState<span class="token punctuation">,</span> enhancer<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> preloadedState<span class="token punctuation">,</span> enhancer<span class="token punctuation">)</span>
    <span class="token keyword">let</span> dispatch <span class="token operator">=</span> store<span class="token punctuation">.</span>dispatch
    <span class="token keyword">let</span> chain <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">const</span> middlewareAPI <span class="token operator">=</span> <span class="token punctuation">{</span>
      getState<span class="token punctuation">:</span> store<span class="token punctuation">.</span>getState<span class="token punctuation">,</span>
      dispatch<span class="token punctuation">:</span> <span class="token punctuation">(</span>action<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
    <span class="token comment" spellcheck="true">/**
     * 注意：middlewareAPI的dispatch函数中的dispatch会被后面的dispath代替
     */</span>
    chain <span class="token operator">=</span> middlewares<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>middleware <span class="token operator">=</span><span class="token operator">></span> <span class="token function">middleware</span><span class="token punctuation">(</span>middlewareAPI<span class="token punctuation">)</span><span class="token punctuation">)</span>
    dispatch <span class="token operator">=</span> <span class="token function">compose</span><span class="token punctuation">(</span><span class="token operator">...</span>chain<span class="token punctuation">)</span><span class="token punctuation">(</span>store<span class="token punctuation">.</span>dispatch<span class="token punctuation">)</span>

    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token operator">...</span>store<span class="token punctuation">,</span>
      dispatch
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>applyMiddleware(…middlewares)为什么返回一个函数呢？<br>先看看applyMiddleware的使用方式是：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
  reducer<span class="token punctuation">,</span>
  <span class="token function">applyMiddleware</span><span class="token punctuation">(</span><span class="token operator">...</span>middleware<span class="token punctuation">)</span>
<span class="token punctuation">)</span>
</code></pre>
<p>在createStore函数中，使用applyMiddleware(…middleware)返回的函数重新包装了createStore。enhancer为applyMiddleware(…middlewares)返回的函数。</p>
<pre class=" language-js"><code class="language-js"><span class="token function">enhancer</span><span class="token punctuation">(</span>createStore<span class="token punctuation">)</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> preloadedState<span class="token punctuation">)</span>
</code></pre>
<p>applyMiddleware源码中，chain是各个中间件接受了middlewareAPI之后返回的函数数组。<br>chain中每一项都为：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">{</span> <span class="token operator">...</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>每一项，都接受一个next作为参数，返回一个接受action的函数。<br>如果middlewares = [f,g,h],则chain = [f1,g1,h1],f1 = f(middlewareAPI)。所以dispath = f1(g1(h1(store.dispatch)))。对于f1函数而言，他的next参数就是g1(h1(store.dispatch))。</p>
<h3 id="redux-thunk"><a href="#redux-thunk" class="headerlink" title="redux-thunk"></a>redux-thunk</h3><p>redux-thunk用于异步action。<br>使用方式如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">import</span> thunk <span class="token keyword">from</span> <span class="token string">'redux-thunk'</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> store <span class="token operator">=</span> <span class="token function">createStore</span><span class="token punctuation">(</span>
  reducer<span class="token punctuation">,</span>
  <span class="token function">applyMiddleware</span><span class="token punctuation">(</span>thunk<span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> fetchPosts <span class="token operator">=</span> postTitle <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
  <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">requestPosts</span><span class="token punctuation">(</span>postTitle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">return</span> <span class="token function">fetch</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`/some/API/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>postTitle<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.json`</span></span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>response <span class="token operator">=</span><span class="token operator">></span> response<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>json <span class="token operator">=</span><span class="token operator">></span> <span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">receivePosts</span><span class="token punctuation">(</span>postTitle<span class="token punctuation">,</span> json<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>

store<span class="token punctuation">.</span><span class="token function">dispatch</span><span class="token punctuation">(</span><span class="token function">fetchPosts</span><span class="token punctuation">(</span><span class="token string">'reactjs'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>源码如下：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">createThunkMiddleware</span><span class="token punctuation">(</span>extraArgument<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> dispatch<span class="token punctuation">,</span> getState <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> next <span class="token operator">=</span><span class="token operator">></span> action <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> action <span class="token operator">===</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> <span class="token function">action</span><span class="token punctuation">(</span>dispatch<span class="token punctuation">,</span> getState<span class="token punctuation">,</span> extraArgument<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    <span class="token keyword">return</span> <span class="token function">next</span><span class="token punctuation">(</span>action<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> thunk <span class="token operator">=</span> <span class="token function">createThunkMiddleware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
thunk<span class="token punctuation">.</span>withExtraArgument <span class="token operator">=</span> createThunkMiddleware<span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> thunk<span class="token punctuation">;</span>
</code></pre>
<p>在这个函数中，{ dispatch, getState }指的就是applyMiddleware源码中的middlewareAPI。next是下一个中间接的action执行函数。</p>
<p>如果action为函数，就执行action(dispatch, getState, extraArgument)，则next不执行，但是当action内部又有同步函数时，就会执行next。</p>
<hr>
<p><a href="http://div.io/topic/1646" target="_blank" rel="external">参考1</a></p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[ES6:class]]></title>
      <url>/2017/06/06/ES6-class/</url>
      <content type="html"><![CDATA[<p>原以为class仅仅只是语法糖，发现在继承上跟原来的方式还是有很大的不同。简单分析记录一下。</p>
<h3 id="es5中的继承"><a href="#es5中的继承" class="headerlink" title="es5中的继承"></a>es5中的继承</h3><p>如下的实现了es5中的继承。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

<span class="token punctuation">}</span>
Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fun1 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">'father function'</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function">Child</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token keyword">var</span> father <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Father</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> father<span class="token punctuation">;</span>
<span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Child</span><span class="token punctuation">(</span><span class="token string">'bobo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
child<span class="token punctuation">.</span>name<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//"bobo"</span>
child<span class="token punctuation">.</span><span class="token function">fun1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//"father function"</span>
</code></pre>
<p>简单的画个图，分为2个部分介绍：<br>1）看看图的右边部分，当Father,Child作为构造函数，他们的prototype属性指向原型对象，因此，他们的实例，可以访问到这个对象的属性，child可以访问到fun1函数，是因为沿着原型链访问到了Father.prototype上的fun1。</p>
<pre class=" language-js"><code class="language-js">child<span class="token punctuation">.</span>fun1 <span class="token operator">===</span> Father<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fun1    <span class="token comment" spellcheck="true">//true</span>
</code></pre>
<p>如果我希望为Child的实例增加公共的方法，则在Child.prototype上增加方法即可。但是这一步必须在Child.prototype = father之后，如果在这之前，会因为改变了原型对象，而被抛弃。</p>
<pre class=" language-js"><code class="language-js">Child<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">;</span>
Child<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>fun2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
<span class="token comment" spellcheck="true">//或者</span>
father<span class="token punctuation">.</span>fun2 <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
</code></pre>
<p>2）图的左边部分，也很容易理解，Father,Child作为普通的函数，是Function对象的实例，因此，可以访问到Function.prototype上的属性。</p>
<p><img src="./es5.png" alt="es5.png"></p>
<p>如果理解到这里没有理解，就可以先停一停了，把es5的原型链搞明白了，才能懂得es6的class。</p>
<h3 id="es6中的继承"><a href="#es6中的继承" class="headerlink" title="es6中的继承"></a>es6中的继承</h3><p>如下所示，ColorPoint是Point的子类。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> pointprop <span class="token operator">=</span> <span class="token string">'Point类属性'</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token function">classMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">'Point类方法'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">toString1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">'x:'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token operator">+</span><span class="token string">',y:'</span><span class="token operator">+</span><span class="token keyword">this</span><span class="token punctuation">.</span>y<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">class</span> <span class="token class-name">ColorPoint</span> <span class="token keyword">extends</span> <span class="token class-name">Point</span> <span class="token punctuation">{</span>
  <span class="token keyword">static</span> colorpointprop <span class="token operator">=</span> <span class="token string">'ColorPoint类属性'</span><span class="token punctuation">;</span>
  <span class="token keyword">static</span> <span class="token function">classMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token string">'ColorPoint类方法'</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> color<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">super</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用父类的constructor(x, y)</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
  <span class="token function">toString2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 调用父类的toString()</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> p <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> cp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ColorPoint</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'red'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>在类Point中，pointprop是类属性，classMethod1是类方法，x,y是实例属性，toString1是实例方法。ColorPoint也是一样，不赘述。</p>
<p>所谓的类方法，类属性是指不会被实例继承，而是直接通过类来调用。也可以叫做静态属性，静态方法。</p>
<pre class=" language-js"><code class="language-js">Point<span class="token punctuation">.</span>pointprop<span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">//"Point类属性"</span>
p<span class="token punctuation">.</span>pointprop<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//undefined</span>
Point<span class="token punctuation">.</span><span class="token function">classMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//"Point类方法"</span>
p<span class="token punctuation">.</span>classMethod1<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//undefined</span>
p<span class="token punctuation">.</span><span class="token function">toString1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment" spellcheck="true">//"x:1,y:2"</span>
</code></pre>
<p>通过extends，ColorPoint对Point进行继承。如何继承的呢？extends给继承赋予了2层含义。还是通过原型链完成。<br>关系图如下：<br><img src="./es6.png" alt="es6.png"></p>
<p>对这个关系图进行解析，也分为2个部分：<br>1）对图片右侧进行解析：<br>子类ColorPoint的原型对象的__proto__属性指向父类的原型对象，也就是说：通过extends,使得子类的原型对象是父类的实例，且子类中的函数自动的添加到这个原型对象上。如图，可以看到ColorPoint.prototype上有toString2方法。</p>
<p>可以验证如下结果均为true</p>
<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>ColorPoint<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ColorPoint<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Point<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Object<span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>由于原型链的存在，可以使得ColorPoint实例可以访问Point的原型方法。</p>
<pre class=" language-js"><code class="language-js">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span><span class="token function">toString1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//"x:1,y:2"</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>cp<span class="token punctuation">.</span><span class="token function">toString2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//"red x:1,y:2"</span>
</code></pre>
<p>有一个值得注意的点：<br>super(x, y);使得x,y成为子类的实例的方法，而不是在原型对象上。</p>
<p>2）对图片左侧：<br>在es5中，可以看到构造函数的__proto__属性都是指向Function.prototype。但是通过extends实现的继承中，构造函数之间存在着联系。<br>如下等式均为true</p>
<pre class=" language-js"><code class="language-js">ColorPoint<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Point<span class="token punctuation">;</span>
Point<span class="token punctuation">.</span>__proto__<span class="token operator">===</span>Function<span class="token punctuation">.</span>prototype<span class="token punctuation">;</span>
</code></pre>
<p>因此，ColorPoint类不仅仅可以调用自己的类属性，类方法，还能访问到Point的类属性和类方法。如下</p>
<pre class=" language-js"><code class="language-js">ColorPoint<span class="token punctuation">.</span>colorpointprop<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//"ColorPoint类属性"</span>
ColorPoint<span class="token punctuation">.</span><span class="token function">classMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//"ColorPoint类方法"</span>
ColorPoint<span class="token punctuation">.</span>pointprop<span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//"Point类属性"</span>
ColorPoint<span class="token punctuation">.</span><span class="token function">classMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//"Point类方法"</span>
</code></pre>
<p>终于说完啦，其实在我们平时常用的继承中，常用的还是右边的原型链，为了更好的理解extends，左边部分也需要理清楚！</p>
]]></content>
      
        <categories>
            
            <category> JS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[数组和对象中的扩展运算符]]></title>
      <url>/2017/06/03/%E6%95%B0%E7%BB%84%E5%92%8C%E5%AF%B9%E8%B1%A1%E4%B8%AD%E7%9A%84%E6%89%A9%E5%B1%95%E8%BF%90%E7%AE%97%E7%AC%A6/</url>
      <content type="html"><![CDATA[<p>最近尝试着在自己的项目中，写es6。扩展运算符(…)是个好东西，但常常会忘记使用，为了更好的在代码中使用，记录一下。</p>
<p>本篇主要为记录，原创内容较少。</p>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p>扩展运算符在对象中的应用包括解构赋值和取出可枚举属性2个作用</p>
<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>对象的解构赋值用于从一个对象取值，相当于将所有可遍历的、但尚未被读取的属性，分配到指定的对象上面。所有的键和它们的值，都会拷贝到新对象上面。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>z <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
x <span class="token comment" spellcheck="true">// 1</span>
y <span class="token comment" spellcheck="true">// 2</span>
z <span class="token comment" spellcheck="true">// { a: 3, b: 4 }</span>
</code></pre>
<p>由于解构赋值要求等号右边是一个对象，所以如果等号右边是undefined或null，就会报错，因为它们无法转为对象。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>z <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Cannot read property 'x' of null</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>z <span class="token punctuation">}</span> <span class="token operator">=</span> undefined<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// Cannot read property 'x' of undefined</span>
</code></pre>
<p>解构赋值必须是最后一个参数，否则会报错。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token operator">...</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 句法错误</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> <span class="token operator">...</span>y<span class="token punctuation">,</span> <span class="token operator">...</span>z <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 句法错误</span>
</code></pre>
<p>解构赋值的拷贝是浅拷贝，即如果一个键的值是复合类型的值（数组、对象、函数）、那么解构赋值拷贝的是这个值的引用，而不是这个值的副本。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token operator">...</span>x <span class="token punctuation">}</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>
obj<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
x<span class="token punctuation">.</span>a<span class="token punctuation">.</span>b <span class="token comment" spellcheck="true">// 2</span>
</code></pre>
<p>解构赋值不会拷贝继承自原型对象的属性。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> o2 <span class="token operator">=</span> <span class="token punctuation">{</span> b<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
o2<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> o1<span class="token punctuation">;</span>
<span class="token keyword">let</span> <span class="token punctuation">{</span> <span class="token operator">...</span>o3 <span class="token punctuation">}</span> <span class="token operator">=</span> o2<span class="token punctuation">;</span>
o3 <span class="token comment" spellcheck="true">// { b: 2 }</span>
o3<span class="token punctuation">.</span>a <span class="token comment" spellcheck="true">// undefined</span>
</code></pre>
<p>上面代码中，对象o3复制了o2，但是只复制了o2自身的属性，没有复制它的原型对象o1的属性。简单的说，Object.keys()能取到的属性(自身，可枚举)，才能在对象解构赋值中拿到。<br><strong><em>但是</em></strong>对于单纯的解构赋值(没有…)是可以拿到继承的属性的。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
o<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">{</span> y<span class="token punctuation">,</span> z <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>
x <span class="token comment" spellcheck="true">// 1</span>
y <span class="token comment" spellcheck="true">// undefined</span>
z <span class="token comment" spellcheck="true">// 3</span>
</code></pre>
<p>对于不可遍历属性也是一样，单纯的解构赋值是可以得到到的不可遍历属性的，但是有(…)却不行，如：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> o <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span>enumerable<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>o<span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token punctuation">{</span>value<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span>enumerable<span class="token punctuation">:</span><span class="token boolean">false</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
o<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> <span class="token punctuation">{</span> x<span class="token punctuation">,</span>g<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">{</span>f<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token operator">=</span> o<span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// undefined</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 8</span>
</code></pre>
<p>对于解构赋值，有一种很常见的应用：如下，使用x和y参数进行操作，其他的参数组成一个对象，作为restConfig</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">baseFunction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> a<span class="token punctuation">,</span> b <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment" spellcheck="true">// ...</span>
<span class="token punctuation">}</span>
<span class="token keyword">function</span> <span class="token function">wrapperFunction</span><span class="token punctuation">(</span><span class="token punctuation">{</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">...</span>restConfig <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

  <span class="token keyword">return</span> <span class="token function">baseFunction</span><span class="token punctuation">(</span>restConfig<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h3 id="取出可枚举属性"><a href="#取出可枚举属性" class="headerlink" title="取出可枚举属性"></a>取出可枚举属性</h3><p>前面扩展运算符(…)用于赋值符号的左边，也就是被赋值的对象，而这里的应用是放到运算符的后面。用于取出参数对象的所有可遍历属性，拷贝到当前对象之中。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> z <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token number">4</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> n <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>z <span class="token punctuation">}</span><span class="token punctuation">;</span>
n <span class="token comment" spellcheck="true">// { a: 3, b: 4 }</span>
</code></pre>
<p>这等同于使用Object.assign方法。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> aClone <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>a <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 等同于</span>
<span class="token keyword">let</span> aClone <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">let</span> ab <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>a<span class="token punctuation">,</span> <span class="token operator">...</span>b <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 等同于</span>
<span class="token keyword">let</span> ab <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p>由于后面的属性会覆盖前面的属性，可以利用这个(…)和自定义属性的顺序先后，做到：修改对象的部分属性和设置默认值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> newVersion <span class="token operator">=</span> <span class="token punctuation">{</span>
  <span class="token operator">...</span>previousVersion<span class="token punctuation">,</span>
  name<span class="token punctuation">:</span> <span class="token string">'New Name'</span> <span class="token comment" spellcheck="true">// Override the name property</span>
<span class="token punctuation">}</span><span class="token punctuation">;</span>
</code></pre>
<p>上面代码中，newVersion对象自定义了name属性，其他属性全部复制自previousVersion对象。</p>
<p>如果把自定义属性放在扩展运算符前面，就变成了设置新对象的默认属性值。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> aWithDefaults <span class="token operator">=</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">...</span>a <span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token comment" spellcheck="true">// 等同于</span>
<span class="token keyword">let</span> aWithDefaults <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> x<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p>和对象很类似，简单举几个例子。</p>
<h3 id="解构赋值-1"><a href="#解构赋值-1" class="headerlink" title="解构赋值"></a>解构赋值</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>bar<span class="token punctuation">]</span><span class="token punctuation">,</span> baz<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
foo <span class="token comment" spellcheck="true">// 1</span>
bar <span class="token comment" spellcheck="true">// 2</span>
baz <span class="token comment" spellcheck="true">// 3</span>

<span class="token keyword">let</span> <span class="token punctuation">[</span>x<span class="token punctuation">,</span> <span class="token punctuation">,</span> y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
x <span class="token comment" spellcheck="true">// 1</span>
y <span class="token comment" spellcheck="true">// 3</span>

<span class="token keyword">let</span> <span class="token punctuation">[</span>head<span class="token punctuation">,</span> <span class="token operator">...</span>tail<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
head <span class="token comment" spellcheck="true">// 1</span>
tail <span class="token comment" spellcheck="true">// [2, 3, 4]</span>
</code></pre>
<p>如果解构不成功，变量的值就等于undefined。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>foo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//foo:undefined</span>
<span class="token keyword">let</span> <span class="token punctuation">[</span>bar<span class="token punctuation">,</span> foo<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>bar<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span>foo<span class="token punctuation">:</span>undefined
</code></pre>
<p>另一种情况是不完全解构，即等号左边的模式，只匹配一部分的等号右边的数组。这种情况下，解构依然可以成功。</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token punctuation">,</span> d<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
a <span class="token comment" spellcheck="true">// 1</span>
b <span class="token comment" spellcheck="true">// 2</span>
d <span class="token comment" spellcheck="true">// 4</span>
</code></pre>
<p>上面两个例子，都属于不完全解构，但是可以成功。<br>如果等号的右边不是数组（或者严格地说，不是可遍历的结构，没有Iterator），那么将会报错。</p>
<h3 id="取出数组中的值放入新数组"><a href="#取出数组中的值放入新数组" class="headerlink" title="取出数组中的值放入新数组"></a>取出数组中的值放入新数组</h3><pre class=" language-js"><code class="language-js"><span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">...</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// b [2,3,1,2,3]</span>
<span class="token keyword">let</span> c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>a<span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// c [1,2,3,6,7]</span>
</code></pre>
<p>写到这里了，感觉重要的是活学活用！</p>
<hr>
<p><a href="http://es6.ruanyifeng.com/" target="_blank" rel="external">参考一</a></p>
]]></content>
      
        <categories>
            
            <category> JS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[transform 3D]]></title>
      <url>/2017/05/26/transform-3D/</url>
      <content type="html"><![CDATA[<p>与transform 3D变换主要有下面几个属性：<br>perspective，perspective-origin，transform-style，backface-visibility还有transform及其他属性。接下来，会一起学习几个属性的功能。<br>建议阅读前首先阅读<a href="/2017/05/22/transform_2D">transform 2D</a>。</p>
<p>首先，先学习几个基本概念</p>
<h2 id="坐标系、透视与灭点"><a href="#坐标系、透视与灭点" class="headerlink" title="坐标系、透视与灭点"></a>坐标系、透视与灭点</h2><p>下图可以看到清晰的看到x,y,z的正方向。<br><img src="./zuobiao.png" alt="坐标系">注1</p>
<p>透视指的是三维变化，当我们看物体会有近大远小的体验，这与三维效果的呈现息息相关。perspective就是css中与透视相关的熟悉。<br>灭点是指，当景物离自己的位置越远时，就会越趋于集中到某一个点上。这个点就是灭点。通过perspective-origin可以改变灭点的位置（默认是中心点）。</p>
<h2 id="perspective"><a href="#perspective" class="headerlink" title="perspective"></a>perspective</h2><p>指定观察者距离「z=0」平面的距离，为元素及其内容应用透视变换。</p>
<p>如下图中，d就是perspective的值。<br><img src="./perspective.png" alt="perspective"><br>应用了perspective之后，当图片离我们越近，则图片越大，越远则越小。<br>可以举个例子<br><img src="./perspectivenone.gif" alt="perspectivenone"><img src="./perspective1.gif" alt="perspective1"><br>左右图中，灰色图片都在沿着x轴转动，但是左图没有设置perspective，右图设置了perspective：200px。这样，就可以在右图看到图片大小的变化，当图片转动到离眼睛近的时候，就会变大，远的时候就会变小。而左图永远好像在一个平面内，z=0上，没有大小的变化。<br>代码如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>rotateX指在x轴上的旋转角度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.wrapper</span> </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px auto<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>
    <span class="token property">perspective</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.wrapper</span> > div </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">180</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">40</span>px <span class="token number">10</span>px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotatex</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token property">animation</span><span class="token punctuation">:</span> test <span class="token number">10</span>s infinite<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token atrule"><span class="token rule">@keyframes</span> test</span> <span class="token punctuation">{</span>
<span class="token selector">0%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">10%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">36</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">20%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">72</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">30%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">108</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">40%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">144</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">50%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">180</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">60%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">216</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">70%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">252</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">80%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">288</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">90%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">324</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token selector">100%</span><span class="token punctuation">{</span><span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotateX</span><span class="token punctuation">(</span><span class="token number">360</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre>
<p>需要注意的一点是，当某个点z坐标超过perspective时，也就越过了我们的眼睛，将无法看到这个点。</p>
<p>perspective有2种用法：<br>perspective：100px;transform: perspective(100px);<br>第一种是将透视应用到其子元素上，所有的子元素共享一个透视距离，灭点。但是第二种是给每个元素使用一个透视距离。举个例子：<br><img src="./perspective2.png" alt="perspective2"><img src="./perspective3.png" alt="perspective3"><br>左图是perspective：100px；右图是transform: perspective(100px);2者的区别显而易见。左图共用了一个透视距离，3个图片都是好像都是从一个点进行观测，每个图片的观测到的大小是不一样的。而右图用了3个透视距离，都是100px;因此，每张图片表现出的样子是一样的。除此之外，对于左例可以用perspective-origin改变整体的灭点位置，而在右例上无法使用。<br>左例代码如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>div1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>div2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>div3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.wrapper</span> </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">400</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">150</span>px auto<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>
    <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span> 
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.wrapper</span> > div </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">180</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">10</span>px <span class="token number">10</span>px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">rotatex</span><span class="token punctuation">(</span><span class="token number">50</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="perspective-origin-x-axis-y-axis"><a href="#perspective-origin-x-axis-y-axis" class="headerlink" title="perspective-origin(x-axis y-axis)"></a>perspective-origin(x-axis y-axis)</h2><table>
<thead>
<tr>
<th style="text-align:left">value</th>
<th style="text-align:left">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">x-axis</td>
<td style="text-align:left">left center right length %</td>
</tr>
<tr>
<td style="text-align:left">y-axis</td>
<td style="text-align:left">top center bottom length %</td>
</tr>
</tbody>
</table>
<p>如图，可以显示出灭点的作用,可以改变我们的视角。<br><img src="./perspective_origin.png" alt="perspective_origin"></p>
<p>还是上面那个例子，当我们旋转了90°后，由于我们的灭点是在中心点，所以我们什么都看不到。如下：<br><img src="./perspective_origin1.png" alt="perspective_origin1"></p>
<p>于是，我将改变改元素的灭点位置。注意，我们改变的是对于其子元素的视角。因此，在此例子上，我们必须把perspective-origin设置在.wrapper上。<br><img src="./perspective_origin2.png" alt="perspective_origin2"><img src="./perspective_origin3.png" alt="perspective_origin3"><br>左图perspective-origin:center top;右图perspective-origin:right bottom;<br>代码如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>rotateX定x轴上的旋转角度<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.wrapper</span> </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">50</span>px auto<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>
    <span class="token property">perspective</span><span class="token punctuation">:</span><span class="token number">200</span>px<span class="token punctuation">;</span>
    <span class="token property">perspective-origin</span><span class="token punctuation">:</span>right bottom<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.wrapper</span> > div </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">180</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">40</span>px <span class="token number">10</span>px<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>
    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotatex</span><span class="token punctuation">(</span><span class="token number">90</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<h2 id="transform-style"><a href="#transform-style" class="headerlink" title="transform-style"></a>transform-style</h2><p>flat(默认) | preserve-3d<br>指定某元素的子元素是（看起来）位于三维空间内，还是在该元素所在的平面内被扁平化。当该属性值为「preserve-3d」时，元素将会创建局部堆叠上下文。</p>
<p>什么意思呢？「preserve-3d」会改变图像的绘制顺序，建立起正真的三维空间。语言苍白无力，上demo。</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrapper<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>div1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>div2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>div3<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>div3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token class">.wrapper</span> </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">150</span>px auto<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid <span class="token hexcode">#000</span><span class="token punctuation">;</span>
    <span class="token property">perspective</span><span class="token punctuation">:</span> <span class="token number">100</span>px<span class="token punctuation">;</span>
   <span class="token comment" spellcheck="true">/*transform-style:preserve-3d;
    perspective-origin:center top; */</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.wrapper</span> > div </span><span class="token punctuation">{</span>    
    <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">180</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span> <span class="token number">120</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">40</span>px <span class="token number">10</span>px<span class="token punctuation">;</span>
    <span class="token property">position</span><span class="token punctuation">:</span>absolute<span class="token punctuation">;</span>    
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.div1</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">50</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> <span class="token hexcode">#ccc</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.div2</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">30</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.div3</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span><span class="token function">translateZ</span><span class="token punctuation">(</span><span class="token number">10</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> red<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p><img src="./transform-style1.png" alt="transform-style1"><br>上图为结果，translateZ用于改变Z轴上的位置，可以知道div3在z=10px的位置，div2在z=30px，div1在z=50px。但是由于网页的绘制顺序，div3还是在最前面。<br>.wrapper上添加transform-style:preserve-3d；在z=50px的div1跑到了最前面<br><img src="./transform-style2.png" alt="transform-style2"><br>为了更好的看清这个例子，.wrapper上添加perspective-origin:center top;<br><img src="./transform-style3.png" alt="transform-style3"></p>
<p>这样对transform-style是不是更了解了一些呢。</p>
<h2 id="backface-visibility"><a href="#backface-visibility" class="headerlink" title="backface-visibility"></a>backface-visibility</h2><p>visible（默认） | hidden<br>指定元素背面面向用户时是否可见。<br>以perspective小节中的动图2举例，可以看到当元素rotatex(90deg)之后，会展示出元素镜像的背面，若是我们希望不看到这个这个背面，则可以为这个div指定：<br>backface-visibility：hidden;结果如下：<br><img src="./backface-visibility1.gif" alt="backface-visibility1"></p>
<h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><p>3D 变换的transform函数有以下几种(与2D相关不再赘述)：</p>
<table>
<thead>
<tr>
<th style="text-align:left">function</th>
<th style="text-align:left">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">matrix3d()</td>
<td style="text-align:left">接受16个参数，以一个4x4矩阵的形式指定一个3D变换</td>
</tr>
<tr>
<td style="text-align:left">translate3d(x,y,z)</td>
<td style="text-align:left">指定3D位移。第1个参数对应X轴，第2个对应Y轴，第3个参数对应Z轴，都不允许省略</td>
</tr>
<tr>
<td style="text-align:left">translateZ(z)</td>
<td style="text-align:left">指定对象Z轴的平移</td>
</tr>
<tr>
<td style="text-align:left">rotate3d(x,y,z,angle)</td>
<td style="text-align:left">指定3D旋转角度，前3个参数分别表示旋转的方向，第4个表示旋转的角度，都不允许省略</td>
</tr>
<tr>
<td style="text-align:left">rotateX(angle)</td>
<td style="text-align:left">指定对象在x轴上的旋转角度 rotate3d(1,0,0,angle)</td>
</tr>
<tr>
<td style="text-align:left">rotateY(angle)</td>
<td style="text-align:left">指定对象在y轴上的旋转角度 rotate3d(0,1,0,angle)</td>
</tr>
<tr>
<td style="text-align:left">rotateZ(angle)</td>
<td style="text-align:left">指定对象在z轴上的旋转角度 rotate3d(0,0,1,angle)</td>
</tr>
<tr>
<td style="text-align:left">scale3d(x,y,z)</td>
<td style="text-align:left">指定3D缩放。第1个参数对应X轴，第2个对应Y轴，第3个对应Z轴，参数不允许省略</td>
</tr>
<tr>
<td style="text-align:left">scalez(z)</td>
<td style="text-align:left">指定对象的z轴缩放</td>
</tr>
</tbody>
</table>
<p>如果你看了<a href="/2017/05/22/transform_2D">2D变换</a>,这里的变换会很容易理解。有个几个点可以注意一下：</p>
<ul>
<li>matrix3d()与3D动画平移，旋转，倾斜都有关系，由于在应用时使用场景较少，不进行推到，有兴趣的朋友可以看看参考文件3。</li>
<li>rotate3d(x,y,z,angle)：可以理解为以经过(0,0,0)到(x,y,z)的直线进行旋转，旋转angle度。</li>
</ul>
<p>之后，应该还会生产一篇动画demo。</p>
<hr>
<p>注1：<a href="http://acgtofe.com/posts/2013/09/css-3d-transform" target="_blank" rel="external">图片来源</a><br><a href="http://acgtofe.com/posts/2013/09/css-3d-transform" target="_blank" rel="external">参考文献1</a><br><a href="http://www.zhangxinxu.com/wordpress/2012/09/css3-3d-transform-perspective-animate-transition/" target="_blank" rel="external">参考文献2</a><br><a href="https://www.w3.org/TR/css-transforms-1/" target="_blank" rel="external">参考文献3</a></p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[transform 2D]]></title>
      <url>/2017/05/22/transform_2D/</url>
      <content type="html"><![CDATA[<p>常常在居中定位时候，使用transform，以为自己对这个属性了如指掌，仔细用了用，发现自己不过是门外汉，本节主要一起学习transform 2D的部分，接下来有时间再写3D部分。</p>
<p>与2D变换相关的属性，主要有transform/transform-origin。</p>
<h2 id="transform-origin"><a href="#transform-origin" class="headerlink" title="transform-origin"></a>transform-origin</h2><p>用于设置以某个原点进行转换<br>语法：transform-origin: x-axis y-axis；<br>默认值：50% 50%，等同于center center<br>取值</p>
<table>
<thead>
<tr>
<th style="text-align:left">value</th>
<th style="text-align:left">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">x-axis</td>
<td style="text-align:left">定义视图被置于 X 轴的何处。可能的值：left center right length %</td>
</tr>
<tr>
<td style="text-align:left">y-axis</td>
<td style="text-align:left">定义视图被置于 Y 轴的何处。可能的值：top center bottom length %</td>
</tr>
</tbody>
</table>
<p>注：这些值都是相对于border-box来说的，不包含margin。</p>
<p>下面举个具体的例子大家就能轻而易举的理解了：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>normal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>block1<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>block1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>block2<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>block2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>block3<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>block3<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>block4<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>block4<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div2<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>block5<span class="token punctuation">'</span></span><span class="token punctuation">></span></span>block5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#wrap</span> </span><span class="token punctuation">{</span>
  <span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>  
  <span class="token property">margin</span><span class="token punctuation">:</span> <span class="token number">200</span>px<span class="token punctuation">;</span>
  <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">1</span>px solid black<span class="token punctuation">;</span>
  <span class="token property">background</span><span class="token punctuation">:</span> <span class="token hexcode">#eee</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token id">#div2</span> </span><span class="token punctuation">{</span>
  <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>
  <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span>
  <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid black<span class="token punctuation">;</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token id">#wrap</span> <span class="token class">.normal</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span>  <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">0</span>deg<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.block1</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform-origin</span><span class="token punctuation">:</span><span class="token number">0%</span> <span class="token number">0%</span><span class="token punctuation">;</span> //等同于 <span class="token property">transform-origin</span><span class="token punctuation">:</span> left top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.block2</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform-origin</span><span class="token punctuation">:</span><span class="token number">100%</span> <span class="token number">0%</span><span class="token punctuation">;</span> //等同于 <span class="token property">transform-origin</span><span class="token punctuation">:</span> right top<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.block3</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform-origin</span><span class="token punctuation">:</span><span class="token number">100%</span> <span class="token number">100%</span><span class="token punctuation">;</span> //等同于 <span class="token property">transform-origin</span><span class="token punctuation">:</span> right bottom<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.block4</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform-origin</span><span class="token punctuation">:</span><span class="token number">0%</span> <span class="token number">100%</span><span class="token punctuation">;</span> //等同于 <span class="token property">transform-origin</span><span class="token punctuation">:</span> left bottom<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector"><span class="token class">.block5</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform-origin</span><span class="token punctuation">:</span><span class="token number">50%</span> <span class="token number">50%</span><span class="token punctuation">;</span> //等同于 <span class="token property">transform-origin</span><span class="token punctuation">:</span> center center<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>结果如下：<br><img src="./normal.png" alt="normal"><img src="./block1.png" alt="block1"><br><img src="./block2.png" alt="block2"><img src="./block3.png" alt="block3"><br><img src="./block4.png" alt="block4"><img src="./block5.png" alt="block5"><br>normal是没有经过变换是正常位置，block1，block2，block3，block4分别以左上角，右上角，右下角，左下角为原点进行旋转。block5以自身为中心进行旋转。</p>
<p>另：<strong>x轴正方向是水平向右边，y轴正方向是垂直向下</strong></p>
<h2 id="transform"><a href="#transform" class="headerlink" title="transform"></a>transform</h2><p>transform的2D变换，涉及到的函数有以下</p>
<table>
<thead>
<tr>
<th style="text-align:left">function</th>
<th style="text-align:left">description</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left">matrix(n,n,n,n,n,n)</td>
<td style="text-align:left">定义 2D 转换，使用六个值的矩阵。</td>
</tr>
<tr>
<td style="text-align:left">translate(x,y)</td>
<td style="text-align:left">定义 2D 转换，沿着 X 和 Y 轴移动元素。</td>
</tr>
<tr>
<td style="text-align:left">translateX(n)</td>
<td style="text-align:left">定义 2D 转换，沿着 X 轴移动元素。</td>
</tr>
<tr>
<td style="text-align:left">translateY(n)</td>
<td style="text-align:left">定义 2D 转换，沿着 Y 轴移动元素。</td>
</tr>
<tr>
<td style="text-align:left">scale(x,y)</td>
<td style="text-align:left">定义 2D 缩放转换，改变元素的宽度和高度。</td>
</tr>
<tr>
<td style="text-align:left">scaleX(n)</td>
<td style="text-align:left">定义 2D 缩放转换，改变元素的宽度。</td>
</tr>
<tr>
<td style="text-align:left">scaleY(n)</td>
<td style="text-align:left">定义 2D 缩放转换，改变元素的高度。</td>
</tr>
<tr>
<td style="text-align:left">rotate(angle)</td>
<td style="text-align:left">定义 2D 旋转，在参数中规定角度。</td>
</tr>
<tr>
<td style="text-align:left">skew(x-angle,y-angle)</td>
<td style="text-align:left">定义 2D 倾斜转换，沿着 X 和 Y 轴。</td>
</tr>
<tr>
<td style="text-align:left">skewX(angle)</td>
<td style="text-align:left">定义 2D 倾斜转换，沿着 X 轴。</td>
</tr>
<tr>
<td style="text-align:left">skewY(angle)</td>
<td style="text-align:left">定义 2D 倾斜转换，沿着 Y 轴</td>
</tr>
</tbody>
</table>
<p>介绍据图函数之前，首先不得不介绍屏幕的坐标系，easy，如图：</p>
<h3 id="matrix-a-b-c-d-e-f"><a href="#matrix-a-b-c-d-e-f" class="headerlink" title="matrix(a,b,c,d,e,f)"></a>matrix(a,b,c,d,e,f)</h3><p>相当于直接应用一个[a,b,c,d,e,f]变换矩阵<br>实际上是一种仿射变换，见<a href="https://zh.wikipedia.org/wiki/%E4%BB%BF%E5%B0%84%E5%8F%98%E6%8D%A2" target="_blank" rel="external">wiki</a>。当然我们不会聊得很“矩阵论”，会从具体的例子出发一起学习。</p>
<p>matrix(a,b,c,d,e,f)相当于对一个坐标（x,y）应用了这样一个变换：<br><img src="./formula.png" alt="formula.png"><br>可以理解为，原来在（x,y）上的点，到了（ax+cy+e，bx+dy+f)上。</p>
<p>下面，将matrix与translate，scale，skew结合进行说明</p>
<h3 id="matrix-1-0-0-1-e-f-与translate-e-f"><a href="#matrix-1-0-0-1-e-f-与translate-e-f" class="headerlink" title="matrix(1,0,0,1,e,f)与translate(e,f)"></a>matrix(1,0,0,1,e,f)与translate(e,f)</h3><p>translate指定对象的2D translation（2D平移）,第一个参数对应X轴(水平方向平移)，第二个参数对应Y轴（垂直方向）平移。如果第二个参数未提供，则默认值为0<br>translateX()/translateY分别是水平方向/垂直方向平移</p>
<p>然而matrix(1,0,0,1,e,f)与translate(e,f)是一样的！<br><img src="./formula2.png" alt="formula2.png"></p>
<p>具体例子如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>normal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>normal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>trans<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>translate(-10px,10px);<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>matrix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>matrix(1,0,0,1,-10,10)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#wrap</span> </span><span class="token punctuation">{</span>
  <span class="token selector">width: 300px;  
  margin: 100px;
  border: 1px solid black;
  background: <span class="token id">#eee</span>;
  div </span><span class="token punctuation">{</span>
    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid black<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.trans</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translate</span><span class="token punctuation">(</span>-<span class="token number">10</span>px,<span class="token number">10</span>px<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.matrix</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">matrix</span><span class="token punctuation">(</span><span class="token number">1</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">1</span>,-<span class="token number">10</span>,<span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre>
<p>结果如下：<br><img src="./translate.png" alt="translate"><br><img src="./translate2.png" alt="translate"><img src="./translate3.png" alt="translate"></p>
<h3 id="matrix-a-0-0-d-0-0-与scale-a-d"><a href="#matrix-a-0-0-d-0-0-与scale-a-d" class="headerlink" title="matrix(a,0,0,d,0,0)与scale(a,d)"></a>matrix(a,0,0,d,0,0)与scale(a,d)</h3><p>scale(a,d)定对象的2D scale（2D缩放）。第一个参数对应X轴，第二个参数对应Y轴。如果第二个参数未提供，则默认取第一个参数的值。scaleX(n)/scaleY(n)同理</p>
<p>matrix(a,0,0,d,0,0)与scale(a,d)功能一致：<br><img src="./formula3.png" alt="formula3.png"></p>
<p>例子如下：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>normal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>normal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>scale<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>scale(0.5,1.5)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>matrix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>matrix(0.5,0,0,1.5,0,0)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#wrap</span> </span><span class="token punctuation">{</span>
  <span class="token selector">width: 200px;  
  margin: 100px;
  border: 1px solid black;
  background: <span class="token id">#eee</span>;
  div </span><span class="token punctuation">{</span>
    <span class="token property">padding</span><span class="token punctuation">:</span><span class="token number">50</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">10</span>px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid black<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.scale</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">scale</span><span class="token punctuation">(</span><span class="token number">0.5</span>,<span class="token number">1.5</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.matrix</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">matrix</span><span class="token punctuation">(</span><span class="token number">0.5</span>,<span class="token number">0</span>,<span class="token number">0</span>,<span class="token number">1.5</span>,<span class="token number">0</span>,<span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>结果如下：<br><img src="./scalenormal.png" alt="scalenormal"><br><img src="./scale1.png" alt="scale1"><img src="./scale1mat.png" alt="scale1mat.png"></p>
<h3 id="matrix-cosθ-sinθ-sinθ-cosθ-0-0-与rotate-θ"><a href="#matrix-cosθ-sinθ-sinθ-cosθ-0-0-与rotate-θ" class="headerlink" title="matrix(cosθ,sinθ,-sinθ,cosθ,0,0)与rotate(θ)"></a>matrix(cosθ,sinθ,-sinθ,cosθ,0,0)与rotate(θ)</h3><p>指定对象的2D rotation（2D旋转)。<br>由于公式可以得到<br><img src="./formula4.png" alt="formula4.png"><br>可以简单的理解，变换后的坐标，到原点的距离没有变化（数学知识啊），但是坐标进行了变换。<br>实际上就是坐标旋转公式，具体的推导可见:<a href="http://www.cnblogs.com/ywxgod/archive/2010/08/06/1793609.html" target="_blank" rel="external">坐标旋转推导</a>。</p>
<p>例子</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>normal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>normal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>rotate<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>rotate(45deg)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>matrix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>matrix(cos,sinθ,-sinθ,cosθ,0,0)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#wrap</span> </span><span class="token punctuation">{</span>
  <span class="token selector">width: 150px;
  height: 150px; 
  margin: 100px;
  border: 1px solid black;
  background: <span class="token id">#eee</span>;
  div </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid black<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.rotate</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">rotate</span><span class="token punctuation">(</span><span class="token number">45</span>deg<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.matrix</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">matrix</span><span class="token punctuation">(</span><span class="token number">0.707</span>,<span class="token number">0.707</span>,-<span class="token number">0.707</span>,<span class="token number">0.707</span>,<span class="token number">0</span>,<span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>结果如下：<br><img src="./rotatenormal.png" alt="rotatenormal"><br><img src="./rotate.png" alt="rotate"><img src="./rotatemat.png" alt="rotatemat"></p>
<h4 id="matrix-1-tan-α-tan-θ-1-0-0-skew-θ-α"><a href="#matrix-1-tan-α-tan-θ-1-0-0-skew-θ-α" class="headerlink" title="matrix(1,tan(α),tan(θ),1,0,0) skew(θ,α)"></a>matrix(1,tan(α),tan(θ),1,0,0) skew(θ,α)</h4><p>skew指定对象skew transformation（斜切扭曲）。第一个参数对应X轴角度，第二个参数对应Y轴角度。如果第二个参数未提供，则默认值为0<br>skewX(θ)/skewY(α)同理。<br>有公式可得：<br><img src="./formula5.png" alt="formula5.png"><br>可以知道，当α为0，以θ倾斜时，y轴坐标不变，x坐标会增加ytan(θ)，反之同理。</p>
<p>举例</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>normal<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>normal<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>skew<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>skew(45deg,0)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>matrix<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>matrix(1,0,1,1,0,0)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<pre class=" language-css"><code class="language-css"><span class="token selector"><span class="token id">#wrap</span> </span><span class="token punctuation">{</span>
  <span class="token selector">width: 150px;
  height: 150px; 
  margin: 100px;
  border: 1px solid black;
  background: <span class="token id">#eee</span>;
  div </span><span class="token punctuation">{</span>
    <span class="token property">width</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>
    <span class="token property">height</span><span class="token punctuation">:</span><span class="token number">100</span>px<span class="token punctuation">;</span>
    <span class="token property">margin</span><span class="token punctuation">:</span><span class="token number">15</span>px<span class="token punctuation">;</span>
    <span class="token property">border</span><span class="token punctuation">:</span> <span class="token number">10</span>px solid black<span class="token punctuation">;</span>
    <span class="token property">background-color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span>
    <span class="token property">transform-origin</span><span class="token punctuation">:</span> <span class="token number">0</span> <span class="token number">0</span> <span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.skew</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">skew</span><span class="token punctuation">(</span><span class="token number">45</span>deg,<span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token selector"><span class="token class">.matrix</span> </span><span class="token punctuation">{</span>
  <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">matrix</span><span class="token punctuation">(</span><span class="token number">1</span>,<span class="token number">0</span>,<span class="token number">1</span>,<span class="token number">1</span>,<span class="token number">0</span>,<span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre>
<p>结果如下：<br><img src="./skewnormal.png" alt="skewnormal"><br><img src="./skew.png" alt="skew"><img src="./skewmat.png" alt="skewmat"></p>
<p>　
　
　
　</p>
<p>写到这里，2D动画的内容全部完成了，学习3D变换，想想就开心。</p>
<hr>
<p><a href="http://www.zhangxinxu.com/wordpress/2012/06/css3-transform-matrix-%E7%9F%A9%E9%98%B5/" target="_blank" rel="external">参考1</a></p>
]]></content>
      
        <categories>
            
            <category> CSS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[React工程初始化]]></title>
      <url>/2017/05/10/React%E5%B7%A5%E7%A8%8B%E5%88%9D%E5%A7%8B%E5%8C%96/</url>
      <content type="html"><![CDATA[<p>一直用的都是VUE框架，毕设的间隙开始学习React，感受一下React的魅力。<br>因为VUE-CIL可以帮助我们快速构建VUE工程，如何快速构建React工程是我最想的了解的。我找到了2种方法。</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>这样生成的工程里没有使用webpack等工具，是一个比较“单纯”的React工程<br>More info: <a href="https://facebook.github.io/react/docs/installation.html" target="_blank" rel="external">install</a></p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g create-react-app
create-react-app my-app

<span class="token function">cd</span> my-app
<span class="token function">npm</span> start
</code></pre>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>基于YEOMAN搭建的<br>More info: <a href="https://github.com/react-webpack-generators/generator-react-webpack#readme" target="_blank" rel="external">install</a></p>
<pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g yo
<span class="token function">npm</span> <span class="token function">install</span> -g generator-react-webpack

<span class="token function">mkdir</span> my-new-project <span class="token operator">&amp;&amp;</span> <span class="token function">cd</span> my-new-project

yo react-webpack
</code></pre>
<p>方法一、二的不同：<br>方法一得到的工程相对更单纯一些，需要开发人员额外的工具<br>方法二得到的工程添加了如webpack等工具，可以简化开发人员的配置<br>学习的初期我更在意对react本身的学习，因此会选用方法二。</p>
]]></content>
      
        <categories>
            
            <category> 框架 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[周日随笔]]></title>
      <url>/2017/05/07/%E5%91%A8%E6%97%A5%E9%9A%8F%E7%AC%94/</url>
      <content type="html"><![CDATA[<p>前段时间精神紧张，松弛了2周之后，是时候重新开始战斗了。</p>
<p>把博客搬到了gihub，希望能一直坚持写下去，阿里云太贵了，免费的更适合我。</p>
<p>过去的2个月，把自己的暑期实习敲定了。意外的获得了2个在我看来都挺满意的offer。<br>纠结了很久，给写出拒信的时候很痛苦，毕竟sz也是一个很想去的城市，还是决定去离家比较近的A厂。希望能在暑假获得更多的成长。</p>
<p>终于来提起勇气去猪场辞职了，呆了大半年，看着周围的同事来来走走，也算是个老同<br>志了，对公司对团队对部门对同事，整个环境都是非常热爱的。微博软文里说，同事就是<br>同事，不能当朋友，但在猪场的这段时间里，我觉得还是交到了很多的朋友，会想念他们。走的时候还最后参加了一次团聚，吃完饭一个人坐上地铁的时候，有一种被抛弃的感觉，明明是自己辞职的。虽然在一个城市，以后再见的机会也是寥寥无几。</p>
<p>这么好的环境，为什么要走呢？<br>想来想去，2点吧，喜欢杭州的天气，环境，未来希望在杭州可持续的发展吧。2是我喜欢变化了一下环境，会让我更有斗志，我承认这是我的缺点，比较未来，在一个部门里呆了很久，也要持续的努力和保持一个很好的状态。</p>
<p>目前令人比较心烦的，大概是毕设了。到目前，还是毫无头绪，希望在接下的1个多月里，能出一些成果。另外，打算持续的坚持健身，感觉年纪大了，注意力总是很难集中，希望运动可以帮助我。</p>
]]></content>
      
        <categories>
            
            <category> Diary </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Diary </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript原型链]]></title>
      <url>/2016/12/12/javascript%E5%8E%9F%E5%9E%8B%E9%93%BE/</url>
      <content type="html"><![CDATA[<p>突然灵光一现，就换了一张原型链的图：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> A <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
A<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token punctuation">{</span>name<span class="token punctuation">:</span><span class="token string">"a"</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> B <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>
B<span class="token punctuation">.</span>prototype <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">A</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">B</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre>
<p><img src="./js.png" alt="js"></p>
<p>比较容易弄错的部分大概是Object，A,B函数的原型对象是Function,因为函数都是通过Function来实现的。而 Function.prototype为对象，因此其原型对象是Object.prototype。<br>可以验证：</p>
<pre class=" language-js"><code class="language-js">A<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Function<span class="token punctuation">.</span>prototype <span class="token comment" spellcheck="true">//true</span>
Object<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Function<span class="token punctuation">.</span>prototype  <span class="token comment" spellcheck="true">//true</span>
Function<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Object<span class="token punctuation">.</span>prototype   <span class="token comment" spellcheck="true">//true</span>
</code></pre>
]]></content>
      
        <categories>
            
            <category> JS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Javascript中的attribute和property的区别]]></title>
      <url>/2016/09/16/Javascript%E4%B8%AD%E7%9A%84attribute%E5%92%8Cproperty%E7%9A%84%E5%8C%BA%E5%88%AB/</url>
      <content type="html"><![CDATA[<p>问题的来源是在JQuery中的2个方法attr(),prop()，这2个方法的使用有什么区别呢？</p>
<h2 id="区别attribute和property"><a href="#区别attribute和property" class="headerlink" title="区别attribute和property"></a>区别attribute和property</h2><p>attribute和property是非常容易混淆的概念，只有区别了attribute和property，才能正确区分attr(),prop()方法。<br>attribute翻译成中文术语为“特性”，property翻译成中文术语为“属性”。<br>看一个简单的例子：</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDiv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
</code></pre>
<p>这里的div元素有2个attribute，id和class，元素的attribute是可以通过看html直观的看到的（除非通过setAttribute等方式设置）。通过setAttribute，getAttribute,removeAttribute可以设置，取得，删除div元素的attribute。<br>那什么是div这个元素的property呢？<br>先看一下下面这个例子：</p>
<pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> dog<span class="token operator">=</span><span class="token punctuation">{</span>
    color<span class="token punctuation">:</span>yellow<span class="token punctuation">,</span>
    eat<span class="token punctuation">:</span>meat
<span class="token punctuation">}</span>
</code></pre>
<p>在dog这个对象中， color，eat都是property。<br>那对于上面这个例子，我们不妨看看浏览器开发者工具<br><img src="./1.jpg" alt="1"><br> 可以看到，DOM对象中有accessKey,align等多个property。<br>在这里，我们关注划线3个property。<br>attributes属性：attributes属性是一个比较特殊的属性。DOM节点的每个特性,都由一个Attr节点表示，且保存在attributes属性中，所以我们看attributes属性，就可以知道该元素有哪些特性，如图：<br><img src="2.jpg" alt="2"><br>我们看到DOM对象中还有id,className，也就是意味着大多数元素的attribute，都可以通过访问property得到，即：</p>
<pre class=" language-js"><code class="language-js">document<span class="token punctuation">.</span><span class="token function">getElementbyId</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementbyId</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>id<span class="token punctuation">;</span>

document<span class="token punctuation">.</span><span class="token function">getElementbyId</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">"class"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
document<span class="token punctuation">.</span><span class="token function">getElementbyId</span><span class="token punctuation">(</span><span class="token string">"myDiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>className<span class="token punctuation">;</span>
</code></pre>
<p>这2组结果是类似的。<br>注意区别：<br>1）只有公认的（非自定义的）特性，才能以属性的形式添加到DOM对象中。<br>例如</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDiv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span> <span class="token attr-name">myAttribute</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>attr<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
document.getElementbyId("myDiv").getAttribute("myAttribute"); //attr
document.getElementbyId("myDiv").myAttribute  //underfined(IE除外，IE会为自定义的特性创建属性)
</code></pre>
<p>2)有几类特殊的attribute，虽然有对应的属性名，但返回内容不一样<br><strong> style </strong> :用getAttribute进行访问时，返回css文本，但用属性访问时，返回一个对象；</p>
<pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myDiv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>div<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">color</span><span class="token punctuation">:</span> yellow<span class="token punctuation">;</span><span class="token property">background-color</span><span class="token punctuation">:</span> red</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>div<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
document.getElementById("myDiv").getAttribute("style");//"color: yellow;background-color: red"
document.getElementById("myDiv").style
//CSSStyleDeclaration {0: "color", 1: "background-color", alignContent: "", alignItems: "", alignSelf: "", alignmentBaseline: "", all: ""…}
</code></pre>
<p><strong> onclick这类事件处理程序 </strong>：用getAttribute进行访问时，返回函数文本，但用属性访问时，返回一个函数；<br><strong> checked </strong>:用getAttribute进行访问时,返回和html中一样“checked”，但用属性访问时，返回一个“true”<br>类似的还有别的只取单个值的特性。<br>小结：attribute是html元素的概念，property是DOM对象的概念。公认的attribute会在DOM对象中自动创建property,因此，公认的attribute都可以通过DOM的property访问。<br><img src="./3.png" alt="3"></p>
<h1 id="JQuery中attr-prop"><a href="#JQuery中attr-prop" class="headerlink" title="JQuery中attr(),prop()"></a>JQuery中attr(),prop()</h1><p>相信大家看完上述内容之后，对attribute和property的理解已经清晰了一些。</p>
<p>jQuery 1.6 版本之前，只有attr()方法，而jQuery 1.6 版本版本之后，attr() 方法对于未设置的 attributes （即标签中没写该 attributes）都会返回 undefined。对于检索和改变 DOM 的 properties，如表单元素的 checked、selected 或 disabled 状态，应使用prop() 方法。<br>为什么呢？</p>
<pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"input"</span>checked<span class="token operator">=</span><span class="token string">"checked"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span>；<span class="token comment" spellcheck="true">//"checked"</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//true</span>
<span class="token operator">&lt;</span>input id<span class="token operator">=</span><span class="token string">"input"</span> <span class="token operator">/</span><span class="token operator">></span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//undefined</span>
<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#input"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">prop</span><span class="token punctuation">(</span><span class="token string">"checked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//false</span>
</code></pre>
<p>为了避免attr()的这个问题影响，于是对于checked、selected 或 disabled 等，普遍选用prop()处理。<br>具体如何选择，可以看看下面这张图：<br><img src="./4.png" alt="4"></p>
<hr>
<p><a href="http://javascript.ruanyifeng.com/jquery/basic.html" target="_blank" rel="external">参考1</a><br><a href="http://stylechen.com/attribute-property.html" target="_blank" rel="external">参考2</a></p>
]]></content>
      
        <categories>
            
            <category> JS </category>
            
        </categories>
        
        
        <tags>
            
            <tag> JS </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[tags]]></title>
      <url>/tags/index.html</url>
      <content type="html"></content>
    </entry>
    
    <entry>
      <title><![CDATA[about]]></title>
      <url>/about/index.html</url>
      <content type="html"><![CDATA[<p>由于资金不足<br>博客从阿里云迁移到了github上了</p>
<p>我是一个热爱前端的美少女<br>一个爱说脏话但是很有素质的美少女<br>一个热爱生活，热爱运动的美少女<br>大家一起加油，么么哒(<em> ￣3)(ε￣ </em>)</p>
]]></content>
    </entry>
    
  
</search>
